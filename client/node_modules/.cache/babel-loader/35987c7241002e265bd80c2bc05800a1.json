{"ast":null,"code":"import _classCallCheck from \"/Users/swagg187/Desktop/crest group version/Crest/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/swagg187/Desktop/crest group version/Crest/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/swagg187/Desktop/crest group version/Crest/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/swagg187/Desktop/crest group version/Crest/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/swagg187/Desktop/crest group version/Crest/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/swagg187/Desktop/crest group version/Crest/client/src/components/Portfolio/TotalValue.js\";\nimport React, { Component } from \"react\";\nimport API from \"../../utils/API\";\nimport { Link, Router } from \"react-router-dom\";\nimport Jumbotron from \"../Jumbotron/index\";\nimport jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\nimport 'jspdf-autotable';\nimport FolioPie from \"../Charts/FolioPie.js\"; // import FolioDoughnut from \"../Charts/FolioDoughnut.js\";\n\nvar TotalValue =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TotalValue, _Component);\n\n  function TotalValue() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TotalValue);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TotalValue)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      watchList: {},\n      portfolio: [],\n      updatePortfolio: [],\n      userPortfolio: [],\n      totalValue: 0,\n      userCash: 0,\n      totalStockValue: 0 // chartData: []\n\n    };\n\n    _this.checkCash = function () {\n      console.log(\"check cash func hit\");\n      API.getCashValue().then(function (res) {\n        console.log(\"checkcash() \", res);\n        console.log(\"above is the res dot data from checkCash\");\n\n        _this.setState({\n          userCash: res.data\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.getUserPortfolio = function () {\n      API.getUserPortfolioData(_this.state.watchList.UserId).then(function (res) {\n        console.log(res.data); //this.setState({portfolio: res.data})\n\n        _this.setState({\n          updatePortfolio: res.data\n        });\n\n        var updatePort = res.data;\n        var updateWatchList = [];\n\n        _this.state.updatePortfolio.forEach(function (el) {\n          updateWatchList.push(el.symbol); //return updateWatchList\n        }); //const userWatchlist = this.state.updatePortfolio[this.state.updatePortfolio.length-1].symbols.join(\",\");\n        //console.log(updateWatchlist.join(\",\"));\n\n\n        API.batchStock(updateWatchList).then(function (res) {\n          //console.log(this.state.updatePortfolio);\n          //   console.log(res.data);\n          for (var k in res.data) {\n            //        console.log(k, res.data[k].quote.latestPrice);\n            for (var i = 0; i < updatePort.length; i++) {\n              if (k.toLowerCase() === updatePort[i].symbol) {\n                updatePort[i][\"latestPriceIEX\"] = res.data[k].quote.latestPrice;\n              }\n            }\n          } //   console.log(updatePort);\n\n\n          _this.setState({\n            userPortfolio: updatePort\n          });\n\n          _this.totalPortfolio(); //console.log(price);\n\n        });\n      });\n    };\n\n    _this.totalPortfolio = function () {\n      var totalStockValue = 0;\n\n      _this.state.userPortfolio.forEach(function (el) {\n        totalStockValue += parseInt(el.Stockquantity) * parseFloat(el.latestPriceIEX);\n      });\n\n      _this.setState({\n        totalStockValue: totalStockValue\n      });\n\n      _this.setState({\n        totalValue: totalStockValue + _this.state.userCash\n      });\n\n      console.log(_this.state.totalValue);\n    };\n\n    return _this;\n  }\n\n  _createClass(TotalValue, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      API.getPertucularUserWatchList().then(function (res) {\n        _this2.setState({\n          watchList: res.data\n        });\n      }).then(function () {\n        _this2.getUserPortfolio();\n\n        _this2.checkCash();\n      });\n    } //Check the cash value \n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var stockValue = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }).format(this.state.totalStockValue);\n      var cashRemaining = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }).format(this.state.userCash);\n      var totalPortfolio = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }).format(this.state.totalValue);\n      var madeProfit = this.state.totalStockValue + this.state.userCash >= 20000;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, stockValue, \" (Stock) + \", cashRemaining, \" (Cash) = \", React.createElement(\"p\", {\n        style: madeProfit ? {\n          color: \"green\"\n        } : {\n          color: \"red\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, totalPortfolio, \" Total Value\"));\n    } //Return and Render-Method End\n\n  }]);\n\n  return TotalValue;\n}(Component); //Portfolio Class end \n\n\nexport { TotalValue as default };","map":{"version":3,"sources":["/Users/swagg187/Desktop/crest group version/Crest/client/src/components/Portfolio/TotalValue.js"],"names":["React","Component","API","Link","Router","Jumbotron","jsPDF","html2canvas","FolioPie","TotalValue","state","watchList","portfolio","updatePortfolio","userPortfolio","totalValue","userCash","totalStockValue","checkCash","console","log","getCashValue","then","res","setState","data","catch","err","getUserPortfolio","getUserPortfolioData","UserId","updatePort","updateWatchList","forEach","el","push","symbol","batchStock","k","i","length","toLowerCase","quote","latestPrice","totalPortfolio","parseInt","Stockquantity","parseFloat","latestPriceIEX","getPertucularUserWatchList","stockValue","Intl","NumberFormat","style","currency","format","cashRemaining","madeProfit","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport API from \"../../utils/API\";\nimport { Link, Router } from \"react-router-dom\";\nimport Jumbotron from \"../Jumbotron/index\";\nimport jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\nimport 'jspdf-autotable';\n\nimport FolioPie from \"../Charts/FolioPie.js\";\n// import FolioDoughnut from \"../Charts/FolioDoughnut.js\";\n\nexport default class TotalValue extends Component {\n    state = {\n        watchList: {},\n        portfolio: [],\n        updatePortfolio:[],\n        userPortfolio:[],\n        totalValue:0,\n        userCash: 0,\n        totalStockValue: 0\n\n        // chartData: []\n    }\n\n    componentDidMount() {\n        API.getPertucularUserWatchList().then((res) => {\n            this.setState({ watchList: res.data });\n        }).then(() => {\n            this.getUserPortfolio();\n            this.checkCash();\n        });\n    }\n\n    //Check the cash value \n    checkCash = () => {\n            console.log(\"check cash func hit\");\n     API.getCashValue()\n         .then(res => {\n            console.log(\"checkcash() \", res);\n            console.log(\"above is the res dot data from checkCash\");\n            this.setState({userCash: res.data});\n        })\n        .catch(err => console.log(err))\n    \n     }\n\n    //API AJAX Call to user transaction table and generate user portfolio updated new table to get profit loss \n    getUserPortfolio = () => {\n        API.getUserPortfolioData(this.state.watchList.UserId).then((res) => {\n            console.log(res.data);\n            //this.setState({portfolio: res.data})\n            this.setState({ updatePortfolio: res.data })\n            const updatePort = res.data;\n            const updateWatchList = [];\n            this.state.updatePortfolio.forEach(function (el) {\n                updateWatchList.push(el.symbol)\n                //return updateWatchList\n            })\n\n            //const userWatchlist = this.state.updatePortfolio[this.state.updatePortfolio.length-1].symbols.join(\",\");\n            //console.log(updateWatchlist.join(\",\"));\n            API.batchStock(updateWatchList).then((res) => {\n                //console.log(this.state.updatePortfolio);\n                //   console.log(res.data);\n                for (let k in res.data) {\n                    //        console.log(k, res.data[k].quote.latestPrice);\n                    for (let i = 0; i < updatePort.length; i++) {\n                        if (k.toLowerCase() === updatePort[i].symbol) {\n                            updatePort[i][\"latestPriceIEX\"] = res.data[k].quote.latestPrice;\n                        }\n                    }\n               }\n            //   console.log(updatePort);\n                 this.setState({userPortfolio: updatePort})\n                 this.totalPortfolio();\n             //console.log(price);\n\n            })\n        })\n    }\n\n    totalPortfolio = () => {\n         let totalStockValue = 0;\n        this.state.userPortfolio.forEach(function(el){\n            totalStockValue +=(parseInt(el.Stockquantity)*parseFloat(el.latestPriceIEX));\n        })\n        this.setState({totalStockValue})\n        this.setState({totalValue: totalStockValue + this.state.userCash });\n        console.log(this.state.totalValue);\n    }\n\n\n    render() {\n      var stockValue = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(this.state.totalStockValue);\n      var cashRemaining = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(this.state.userCash);\n      var totalPortfolio = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(this.state.totalValue);\n      var madeProfit = (this.state.totalStockValue + this.state.userCash) >= 20000;\n\n        return (\n          <div>\n            {stockValue} (Stock) + {cashRemaining} (Cash) = <p style={ madeProfit ? {color:\"green\"} : {color:\"red\"} }>{totalPortfolio} Total Value</p>\n          </div>\n        )\n          \n    }   //Return and Render-Method End\n} //Portfolio Class end "]},"metadata":{},"sourceType":"module"}