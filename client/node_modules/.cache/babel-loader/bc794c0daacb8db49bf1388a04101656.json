{"ast":null,"code":"import _classCallCheck from \"/Users/swagg187/Desktop/crest group version/Crest/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/swagg187/Desktop/crest group version/Crest/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/swagg187/Desktop/crest group version/Crest/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/swagg187/Desktop/crest group version/Crest/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/swagg187/Desktop/crest group version/Crest/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/swagg187/Desktop/crest group version/Crest/client/src/components/Charts/StaticAreaChart.js\";\nimport React, { Component } from \"react\";\nimport ReactFC from 'react-fusioncharts';\nimport FusionCharts from 'fusioncharts'; // Step 4 - Including the chart type\n\nimport ScrollArea2d from 'fusioncharts/fusioncharts.charts'; // Step 5 - Including the theme as fusion\n\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion'; // Step 6 - Adding the chart as dependency to the core fusioncharts\n\nReactFC.fcRoot(FusionCharts, ScrollArea2d, FusionTheme); // Step 8 - Creating the DOM element to pass the react-fusioncharts component\n\nvar StaticAreaChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StaticAreaChart, _Component);\n\n  function StaticAreaChart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StaticAreaChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StaticAreaChart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      type: 'scrollarea2d',\n      // The chart type\n      width: _this.props.width,\n      // Width of the chart\n      height: _this.props.height,\n      // Height of the chart\n      dataFormat: 'json',\n      // Data type\n      chart: {},\n      categories: [],\n      dataset: []\n    };\n    return _this;\n  }\n\n  _createClass(StaticAreaChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.update();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.data !== prevProps.data) {\n        this.update();\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var chart = this.props.data.chart;\n      var dataset = [];\n      var dates = [];\n      var yAxisMin = null;\n      var yAxisMax = 0;\n      Object.keys(chart).forEach(function (key) {\n        dates.push({\n          \"label\": chart[key].date.slice(-5)\n        });\n        dataset.push({\n          \"value\": chart[key].close\n        });\n        yAxisMax = chart[key].high > yAxisMax ? Math.round(chart[key].high) : yAxisMax;\n        yAxisMin = yAxisMin === null || chart[key].low < yAxisMin ? Math.round(chart[key].low) : yAxisMin;\n      });\n      this.setState({\n        dataSource: {\n          // Chart Configuration\n          \"chart\": {\n            \"caption\": this.props.data.quote.symbol,\n            \"subCaption\": this.props.data.quote.companyName,\n            \"xAxisName\": \"Date (mm-dd)\",\n            \"yAxisName\": \"Cost USD\",\n            \"yAxisMaxValue\": yAxisMax,\n            \"yAxisMinValue\": yAxisMin,\n            \"numberPrefix\": \"$\",\n            \"lineThickness\": \"3\",\n            \"flatScrollBars\": \"1\",\n            \"scrollheight\": \"10\",\n            \"numVisiblePlot\": \"6\",\n            \"numVDivLines\": this.props.data.chart.length - 1,\n            \"theme\": \"fusion\"\n          },\n          \"categories\": [{\n            \"category\": dates\n          }],\n          \"dataset\": [{\n            \"data\": dataset\n          }]\n        }\n      }); // end of setState\n    } // end of update()\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ReactFC, Object.assign({}, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return StaticAreaChart;\n}(Component);\n\n;\nexport default StaticAreaChart;","map":{"version":3,"sources":["/Users/swagg187/Desktop/crest group version/Crest/client/src/components/Charts/StaticAreaChart.js"],"names":["React","Component","ReactFC","FusionCharts","ScrollArea2d","FusionTheme","fcRoot","StaticAreaChart","state","type","width","props","height","dataFormat","chart","categories","dataset","update","prevProps","data","dates","yAxisMin","yAxisMax","Object","keys","forEach","key","push","date","slice","close","high","Math","round","low","setState","dataSource","quote","symbol","companyName","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport ReactFC from 'react-fusioncharts';\nimport FusionCharts from 'fusioncharts';\n\n// Step 4 - Including the chart type\nimport ScrollArea2d from 'fusioncharts/fusioncharts.charts';\n\n// Step 5 - Including the theme as fusion\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\n// Step 6 - Adding the chart as dependency to the core fusioncharts\nReactFC.fcRoot(FusionCharts, ScrollArea2d, FusionTheme);\n\n\n// Step 8 - Creating the DOM element to pass the react-fusioncharts component\nclass StaticAreaChart extends Component {\n  state = {\n    type: 'scrollarea2d',// The chart type\n    width: this.props.width, // Width of the chart\n    height: this.props.height, // Height of the chart\n    dataFormat: 'json', // Data type\n    chart: {},\n    categories: [],\n    dataset: []\n  }\n  componentDidMount() {\n    this.update();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      this.update();\n    }\n  }\n\n  update() {\n    const chart = this.props.data.chart;\n    const dataset = [];\n    const dates = [];\n    let yAxisMin = null;\n    let yAxisMax = 0;\n\n    Object.keys(chart).forEach(function (key) {\n      dates.push({ \"label\": chart[key].date.slice(-5) });\n      dataset.push({ \"value\": chart[key].close });\n      yAxisMax = (chart[key].high > yAxisMax) ? Math.round(chart[key].high) : yAxisMax;\n      yAxisMin = (yAxisMin === null || chart[key].low < yAxisMin) ? Math.round(chart[key].low) : yAxisMin;\n    });\n\n    this.setState({\n      dataSource: {\n        // Chart Configuration\n        \"chart\": {\n          \"caption\": this.props.data.quote.symbol,\n          \"subCaption\": this.props.data.quote.companyName,\n          \"xAxisName\": \"Date (mm-dd)\",\n          \"yAxisName\": \"Cost USD\",\n          \"yAxisMaxValue\": yAxisMax,\n          \"yAxisMinValue\": yAxisMin,\n          \"numberPrefix\": \"$\",\n          \"lineThickness\": \"3\",\n          \"flatScrollBars\": \"1\",\n          \"scrollheight\": \"10\",\n          \"numVisiblePlot\": \"6\",\n          \"numVDivLines\": this.props.data.chart.length - 1,\n          \"theme\": \"fusion\",\n        },\n        \"categories\": [{\n          \"category\": dates\n        }],\n        \"dataset\": [{\n          \"data\": dataset\n        }]\n      }\n    }) // end of setState\n  } // end of update()\n\n  render() {\n    return (\n      <ReactFC\n        {...this.state} />\n    );\n  }\n};\n\nexport default StaticAreaChart;"]},"metadata":{},"sourceType":"module"}